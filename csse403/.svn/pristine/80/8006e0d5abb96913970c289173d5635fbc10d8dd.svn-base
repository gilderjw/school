% :- module(csse403nlp,[parse/2,translate/2]).
% we should use a module,really, but it wasn't obvious how to
% make it so the that the operator => displays correctly when it
% is in a module.

% this creates a new => operator to have the same priority as +
% seems to make it behave as you would expect.
:- op(200, xfx, =>).
=>(_,_).

% your code goes below
% the tests are in another file


noun(apple).
noun(boy).
noun(girl).

qualifier(some).
qualifier(all).

intransitive_verb(run).
intransitive_verb(dance).

transitive_verb(like).
transitive_verb(hate).
transitive_verb(respect).

relative_clause(that).
relative_clause(which).


%% S --> NP VP    
statement(X) :-
        noun_phrase(X,NounRemainder),
        verb_phrase(NounRemainder,[]).

%% NP --> Qual Noun 
noun_phrase([Qual,Noun|Rest],Rest) :- 
	qualifier(Qual),
	noun(Noun).

%% NP --> Qual RELCL 
noun_phrase([Qualifier|RelClause],Rest) :- 
	%% noun(Noun),
	qualifier(Qualifier),
	relative_clause_phrase(RelClause, Rest).

%% VP --> Int-Verb 
verb_phrase([Verb|Rest], Rest) :- 
	intransitive_verb(Verb).

%% VP --> Trans-Verb NP
verb_phrase([Verb|NounPhrase], Rest) :-
	transitive_verb(Verb),
	noun_phrase(NounPhrase, Rest).

%% RELCL --> Noun Rel VP 
relative_clause_phrase([Noun, Rel|Verb], Rest) :-
	noun(Noun),
	relative_clause(Rel),
	verb_phrase(Verb, Rest).

%% RELCL --> Noun Rel NP Trans-Verb
relative_clause_phrase([Noun, Rel|Stuff], Rest) :-
	noun(Noun),
	relative_clause(Rel),
	noun_phrase(Stuff, [Tverb|Rest]),
	transitive_verb(Tverb).

%% parse(X,statement(NT,VT)).

%% translate(statement(NT,VT), Output).

%% statement([all, girl, run]).
%%  ;
%% statement([some, girl, run]).
%%  ;
%% statement([some, girl, run]).
%%  ;
%% statement([some, girl, like, all, apple]).
%%  ;
%% statement([some, boy, that, like, some, apple, run]).
%%  ;
%% statement([some, boy, that, hate, some, girl, like, some, apple]).
%%  ;
%% statement([all, boy, that, some, boy, like, run]).
%%  ;
%% statement([all, boy, like, all, girl, that, like, all, boy]).
%%  ;