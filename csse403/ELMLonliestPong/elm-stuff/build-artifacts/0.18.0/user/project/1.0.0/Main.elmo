var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 500 500'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width('500px'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$rect,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x(
						_elm_lang$core$Basics$toString(model.x)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y(
							_elm_lang$core$Basics$toString(model.y)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('60'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('10'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#0B79CE'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$keyToVel = function (key) {
	var _p0 = key;
	switch (_p0.ctor) {
		case 'Left':
			return -5;
		case 'Right':
			return 5;
		default:
			return 0;
	}
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		var _p2 = _p1._0;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					key: _p2,
					x: model.x + _user$project$Main$keyToVel(_p2)
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {x: a, y: b, key: c};
	});
var _user$project$Main$Key = function (a) {
	return {ctor: 'Key', _0: a};
};
var _user$project$Main$Both = {ctor: 'Both'};
var _user$project$Main$None = {ctor: 'None'};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: {x: 30, y: 440, key: _user$project$Main$None},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Right = {ctor: 'Right'};
var _user$project$Main$Left = {ctor: 'Left'};
var _user$project$Main$handleDown = function (state) {
	var _p3 = state;
	_v2_4:
	do {
		switch (_p3._0) {
			case 37:
				switch (_p3._1.ctor) {
					case 'Right':
						return _user$project$Main$Key(_user$project$Main$Both);
					case 'None':
						return _user$project$Main$Key(_user$project$Main$Left);
					default:
						break _v2_4;
				}
			case 39:
				switch (_p3._1.ctor) {
					case 'Left':
						return _user$project$Main$Key(_user$project$Main$Both);
					case 'None':
						return _user$project$Main$Key(_user$project$Main$Right);
					default:
						break _v2_4;
				}
			default:
				break _v2_4;
		}
	} while(false);
	return _user$project$Main$Key(_p3._1);
};
var _user$project$Main$handleUp = function (state) {
	var _p4 = state;
	_v3_4:
	do {
		switch (_p4._0) {
			case 37:
				switch (_p4._1.ctor) {
					case 'Both':
						return _user$project$Main$Key(_user$project$Main$Right);
					case 'Left':
						return _user$project$Main$Key(_user$project$Main$None);
					default:
						break _v3_4;
				}
			case 39:
				switch (_p4._1.ctor) {
					case 'Both':
						return _user$project$Main$Key(_user$project$Main$Left);
					case 'Right':
						return _user$project$Main$Key(_user$project$Main$None);
					default:
						break _v3_4;
				}
			default:
				break _v3_4;
		}
	} while(false);
	return _user$project$Main$Key(_p4._1);
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$keyboard$Keyboard$downs(
				function (k) {
					return _user$project$Main$handleDown(
						{ctor: '_Tuple2', _0: k, _1: model.key});
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$keyboard$Keyboard$ups(
					function (k) {
						return _user$project$Main$handleUp(
							{ctor: '_Tuple2', _0: k, _1: model.key});
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
